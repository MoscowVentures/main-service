openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: auth
  - name: main
paths:
  /login:
    post:
      tags:
        - auth
      summary: Login user
      description: This can only be done by the logged in user.
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /confirm:  
    post:
      tags:
        - auth
      summary: Confirm phone
      requestBody:
        content:
          application/json:
            schema:
              properties:
                code:
                  type: integer
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                properties:
                  token:
                    type: string
  /profile:
    get:
      tags:
        - user
      summary: Get user by user id
      description: ''
      operationId: getUserById
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
  /home:
    get:
      tags:
        - main
      summary: Get  stories
      description: ''
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: failed
          in: query
          schema:
            type: string
        - name: completed
          in: query
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                properties:
                  stories:
                    type: array
                    items:
                      $ref: '#/components/schemas/Storie'
        '404':
          description: User not found
  /question:
    get:
      tags:
        - main
      summary: Get random question
      description: ''
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                themes:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                properties:
                  question:
                    $ref: '#/components/schemas/Question'
        '404':
          description: User not found
  /question/{uuid}/answer:
    post:
      tags:
       - main
      summary: Get answer from user
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                answers:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                properties:
                  correct: 
                    type: boolean
                
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        phone:
          type: string
          example: '12345'
        age:
          type: integer
          format: int32
          example: 10
      xml:
        name: user
    Storie:
      type: object
      properties:
        url:
          type: string
        text:
          type: string
    Question:
      type: object
      properties:
        title: 
          type: string
        type: 
          type: integer
        answers:
          type: array
          items:
            type: string

